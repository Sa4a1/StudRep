16.01.24
Основные принципы тестирования 

Тестирование программного продукта - это процесс выполнения программ на некотором наборе данных для которого заранее известен результат применения и известны правила поведения этих программ 
Указанный набор данных называется тестовым 
Тестирование программ является одной из составных частей более общего понятия отладки программ
Процесс отладки включает:
1) Действия направлены на выявление ошибок (тестирование) 
2) Диагностику и локализацию ошибок (определение характера ошибок и их местонахождение)
3) Внесение изменений в программу с целью устранения ошибок

Цель тестирования - заставить программу сбиться 

Особенности тестирование ПП:
1) отсутствие эталона программы, которому должна соответствовать тестируемая программа 
2) Высокая сложность программ и принципиальная невозможность исчерпающего тестирования
3) Практическая невозможность создания единой методики тестирования в силу большого разнообразия ПП по их сложности функциональному назначению в области использования 

Правила проведения тестирования:
1) процесс тестирования более эффективен, если проводится не автором программы; это не означает что программист не может тестировать свою программу, речь идет о повышении эффективности тестирования

2) Необходимые части тестового набора данных должно быть описание предполагаемых значений результатов тестовых прогонов, чтобы определить правильность полученных результатов необходимо знать ожидаемый результат

3) Необходимо изучить результаты каждого теста

4) Тесты для неправильных и непредусмотренных входных данных должны разрабатываться так же тщательно, как и для правильных

5) Небходимо проверять не только делает ли программа то, для чего она предназначена, но и не делает ли она того, чего не должна делать

6) Следует тщательнее те участки программ, где обнаруживается больше ошибок 

Тестирование - процесс выполнения программы или ее части, с целью найти ошибки; 
Доказательства - попытка найти ошибки в программе без относительно внешней для программы среде 
Большинство методов доказательства предполагает формулировку утверждений о поведении программы и доказательства математических теорем о правильности программ
Контроль - попытка найти ошибки, выполняя программу в тестовой или моделируемой среде
Испытания - попытка найти ошибки выполняя программу в заданной реальной среде
Аттестация - авторитетное подтверждение правильности программ; при тестировании с целью аттестации выполняется сравнение с некоторым заранее определенным стандартом 

23.01.24
Стратегия проектирования тестов 
В тестирование по входит:
1) установка задачи для теста
2) проектирование и написание теста 
3) выполнение тестов и изучение результатов тестирования 

существуют следующие стратегии:
1) тестирование по отношению к спецификациям 
2) тестирование по отношению к тексту программы 

Сторонники первого подхода проектируют тесты, исследуя внешние спецификации сопряжения программы или модуля, программа рассматривается как черный ящик 

Сторонники второго подхода проектируют тесты, изучая логику программы

Нельзя проектировать тесты, опираясь только на одну из стратегий 
Каждый тест должен давать максимальную отдачу по сравнению к затратам 


Методы тестирования:
1) Статистическое тестирование - проводится без исп. компьютеров путем просмотра текста программы после трансляции проверки правил структурного построения программ и обработки данных; в качестве эталонов используются внутренние спецификации и опыт специалистов-тестировщиков
Применение данного метода достаточно эффективно для типичных программ, он способствует существенным повышением производительности и надежности программ, позволяет раньше обнаружить ошибки, а значить уменьшить стоимость их исправления
данный метод находит от 30 до 70% ошибок логического проектирования и кодирования
2) детерминированное тестирование - многократное выполнение программ на компьютере с использованием определенных тестовых наборов данных 
при ДТ контролируется каждая комбинация исходных данных и соотв. результаты, а также каждое утверждение спецификаций тестируемой программы
этот метод наиболее трудоемкий поэтому применяется для отдельных модулей в процессе сборки программы, или для небольших и несложных комплексов 
3) тохастическое тестирование - предполагает использование в качестве исходных данных множество случайных величин соответствующими распределениями 
для сравнения полученных результатов используется также распределение случайных величин 
ТТ применяют в основном для обнаружения ошибок, а для диагностики и локализации ошибок с исп. конкретных значений исходных данных 
ТТ лучшим образом подвергается автоматизации путем исп. датчика случайных чисел и применяется для комплексного тестирования программного продукта
4) тестрование в реальном масштабе времени - осущ. для программного продукта, предназначенного для работы в системах реального времени 
в процессе такого тестирования проверяются результаты обработки исходных данных с учетом времени их поступления длительности и приоритетности обработки 
при обнаружении отклонения результатов для локализации ошибок 
фиксирует время 

Требования к повышению качества ПП предполагает необходимость подвергать их различным методам тестирования и их сочетаниям в зависимости от сложности и области применения 

1) Восходящее тестирование - при нем программа собирается тестироваться снизу вверх, только модули самого нижнего уровня (модули не вызывающие других модулей) 
после того как тестирование этих модулей завершено переходят к тестированию модулей непосредственно вызывающий эти модули 
модули более высокого уровня тестируются не автономно, а вместе с модулями низкого уровня
процесс повторяется до тех пор пока не будет достигнута вершина сопряжения программ 
при ВТ необходим драйвер для каждого модуля
драйвер ,- это небольшая ведущая программа
тестовые данные представляются как встроенные в эту программу переменные и структуры данных и она многократно вызывает тестируемый модуль
📃📃📃📃📃
ТЕМА 2: СТРАТЕГИЯ ПРОЕКТИРОВАНИЯ ТЕСТОВ.

В тестирование ПО входят:
⬛️ 1- установка задачи для теста.
⬛️ 2- проектирование и написаное тестов
⬛️ 3- выполнение тестов и изучение результатов тестирования.

Существует следующая СТРАТЕГИЯ:
⬛️ 1- тестирование по отношению к спецификации
⬛️ 2- тестирование по отношению к тексту программы

🟣Сторонники первого подхода проектируют тесты исследуя внешние спецификации и спецификации сопряжения программы им модуля. Программа рассматривается как ЧЁРНЫЙ ЯЩИГ.

🟣Сторонники второго подхода изучают тесты изучая логику программы.
Нельзя проектировать тесты, опираясь только на одну из стратегий. Каждый тест должен давать максимальную отдачу по сравнению к затратам.

👾👾👾
🟣МЕТОДЫ ТЕСТИРОВАНИЯ:

⬛️1 - СТАТИСТИЧЕСКОЕ тестирование.(проводится, не юзая комп, путём просмотра текста проги, после трансляции, проверки правил структурного построение программ и обработки данных. В качестве эталонов используется внутренние спецификации и опыт тестировщиков.
Применение эффективно для типичных программ. Позволяет раньше обнаружить ошибки - уменьшает стоимость их устранения. Находит от 30%-80% ошибок логики и кода.)

⬛️2- ДЕТЕРМИНИРОВАННОЕ тестирование. (многократное выполнение проги на компе с использованием определённых тестовых наборов данных. При этом тестировании контролируется каждая комбинация исходных данных и соответствующие результаты, каждое утверждение спецификации тестируемый проги. Наиболее трудоёмкой метод => примеряется для отдельных модулей в процессе сборки проги, или дня небольших и несложных комплексов.)

⬛️3- сТОХАСТИЧЕСКОЕ тестирование. ( предполагает использование в качестве исходных данных множества случайных величин с соответствующими распределениями. Применяет для обнаружения ошибок. А для локализации и диагностики переходят к ДЕТЕРМИНИРОВАННОМУ, с использованием конкретных значений исходных данных. 
Данное тестирование не лучшим образом подвергается автоматизации путём использования датчиков случайных чисел и применяется для комплексного тестирование программного продукта.)

⬛️4- тестирование В РЕАЛЬНОМ МАСШТАБЕ ВРЕМЕНИ. (осуществляется для ПД предназначенного для работы в системах реального времени. В процессе такого тестирования проверяются результаты обработки исходных данных с учётом времени их поступления длительности и приоритетности обработки динамики использования памяти и взаимодействия с другими прогами. При обнаружении отклонения результатов от ожидаемых для локализации ошибок фиксируют время и переходят к ДЕТЕРМИНИРОВАНОМУ тестированию

Требования в повышению качества ПД предполагает необходимость подвергать их различным методам тестирования и их сочетания. В зависимости от сложности и области применения.

📃📃📃
🟣ВИДЫ ТЕСТИРОВАНИЯ:

⬛️ВОСХОДЯЩЕЕ - программа собирается и тестируется снизу вверх. Только модули самого нижнего уровня тестируется изолированно (автономно). Модули более высокого уровня тестируются не автономно, а вместе с проверенными модулями более низкого lvl. Процесс повторяется до достижения вершины. 
При ВОСХОДЯЩЕМ тестировании для каждого модуля необходим драйвер. Тестовые данные представляются как встроенные в эту программу переменные и структуры данных.
⬛️НИСХОДЯЩЕЕ - при нисходящем подходе программа собирается и тестируется сверху вниз. Изолированно тестируется только головной модуль, после того как тестирование этого модуля завершено, с ним соединяются один за другим модули непосредственно вызываемые им и тестируется получена комбинация.
Процесс повторяется до тех пор, пока не будут собраны и проверены все модули. При этом подходе возникает два вопроса:
🟣1- Что делать когда тестируемый модуль вызывает модуль более низкого уровня. (Для него пишутся модули заглушки, которые имитируют функции недостающих модулей)
🟣2- как подавать тестовые данные (тесты пишутся в виде обычных внешних данных и передаются программе через выделенные ей устройства ввода)

ПЛЮСЫ НИСХОДЯЩЕГО ТЕСТ.
➕Совмещает тестирование модуля, тестирование сопряжений и частично тестирование внешних функций.
➕когда модули ввода вывода уже подключены, тесты можно готовить в удобном виде.

Нисходящий подход выгоден в том случае, если есть сомнения  на счёт осуществимости программы, и если в ней могут оказаться серьёзные дефекты. 

МИНУСЫ:
➖ Редко тестируется досконально сразу после его подключения т.к. основательное тестирование модуля может потребовать крайне изощрённой заглушки.
➖ Нисходящий подход порождает веру в возможность начать программирование и тестирование программы до того как программа будет полностью спроектирована.

⬛️МОДИФИЦИРОВАННЫЙ НИСХОДЯЩИЙ - при нисходящем тестировании часто нельзя тестировать определённые логические условия, например: ошибочные ситуации или защитные проверки.
Нисходящий метод кроме того делает невозможной проверку исключительных ситуаций модуля, если прога работает с ним лишь в ограниченном контексте. Модуль не получит полный набор входных значений. Модифицированный метод эти проблемы решаются. Чтобы их решить нужно каждый модуль тестировать автономно перед подключением к проге.
Применяют для небольших программных комплексах

МИНУСЫ:
➖ требуется писать драйвера и заглушки

⬛️МЕТОД БОЛЬШОГО СКАЧКА - каждый модуль тестируется автономно, по окончанию теста модулей они интегрируются в систему все сразу.

МИНУСЫ:
➖ заглушки и драйвера для каждого модуля
➖ модули не интегрируются до самого последнего момента. Будут серьёзные ошибки в сопряжении модулей.
➖усложняет отладку

Метод большого скачка подходит для небольших и хорошо спроектированных программ.

⬛️МЕТОД САНДВИЧА - компромисс между сходящим и нисходящим подходами, попытка использования плюсами обоих методов, избежав минусы. В данном методе сразу начинают сходящее и нисходящее тестирования. Этот мёдом сохраняет плюсы тех подходов как начало интеграции системы на раннем этапе. Применяют для биг программ и ОС и пакетов прикладных программ.

⬛️МОДИФИЦИРОВАННЫЙ МЕТОД САНДВИЧА - проблема та же что и при нисходящем подходе(нельзя тестировать отдельные модули